{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMV3Tqr+dOrIeI0WxChdmzT"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"XuLt9W_XWUIv"},"outputs":[],"source":["'''\n","This file was used to calculate several statistics all at once. These statistics required unique and complex formulas for achieving the desired results.\n","This specific file takes in a single excel spreadsheet and returns another spreadsheet with 8 different tables of all the desired information, formatted\n","in a way which is immediately readable and presentable in Excel or printed out on paper.\n","'''\n","import pandas as pd\n","import locale\n","import statistics as st\n","import xlsxwriter\n","from openpyxl.styles import Alignment\n","\n","\n","workbook = xlsxwriter.Workbook(r\"file path\")\n","\n","locale.setlocale(locale.LC_ALL, '')\n","\n","originalDF=pd.read_excel(r'file path',0,header=4)\n","\n","def CERT(x):\n","    d = {}\n","    d['Sales in Period'] = \"{:.0f}\".format(x['ASSESSMENT'].count())\n","    d['Lowest Sale Price'] = locale.currency(x['Consider'].min(),grouping=True,symbol=True).split('.', 1)[0]\n","    d['Highest Sale Price'] = locale.currency(x['Consider'].max(),grouping=True,symbol=True).split('.', 1)[0]\n","    d['Mean Sale Price'] = locale.currency(x['Consider'].mean(),grouping=True,symbol=True).split('.', 1)[0]\n","    d['Median Sale Price'] = locale.currency(x['Consider'].median(),grouping=True,symbol=True).split('.', 1)[0]\n","    d['Total Assessed 70% Value (Sold Parcels)'] = locale.currency(sum(x['ASSESSMENT']),grouping=True,symbol=True).split('.', 1)[0]\n","    d['Total Sale Price'] = locale.currency(sum(x['Consider']),grouping=True,symbol=True).split('.', 1)[0]\n","    d['Weighted Mean (70% Value/Total Sales)'] = \"{:.3f}\".format(sum(x['ASSESSMENT'])/sum(x['Consider']))\n","    d['Median Ratio'] = \"{:.3f}\".format(st.median(x['cert RATIO'].astype(float)))\n","    d['Mean'] = \"{:.3f}\".format(x['cert RATIO'].mean())\n","    d['COD'] = \"{:.3f}\".format(st.mean(abs(x['cert RATIO']-st.median(x['cert RATIO'])))/st.median(x['cert RATIO'])*100)\n","    d['PRD'] = \"{:.3f}\".format(((x['ASSESSMENT'] / x['Consider']).mean())/(sum(x['ASSESSMENT'])/sum(x['Consider'])))\n","    return pd.Series(d)\n","\n","def WKSHT(x):\n","    d = {}\n","    d['Sales in Period'] = \"{:.0f}\".format(x['Consider'].count())\n","    d['Lowest Sale Price'] = locale.currency(x['Consider'].min(),grouping=True,symbol=True).split('.', 1)[0]\n","    d['Highest Sale Price'] = locale.currency(x['Consider'].max(),grouping=True,symbol=True).split('.', 1)[0]\n","    d['Mean Sale Price'] = locale.currency(x['Consider'].mean(),grouping=True,symbol=True).split('.', 1)[0]\n","    d['Median Sale Price'] = locale.currency(x['Consider'].median(),grouping=True,symbol=True).split('.', 1)[0]\n","    d['Total Assessed 70% Value (Sold Parcels)'] = locale.currency(sum(x['WKSHT']),grouping=True,symbol=True).split('.', 1)[0]\n","    d['Total Sale Price'] = locale.currency(sum(x['Consider']),grouping=True,symbol=True).split('.', 1)[0]\n","    d['Weighted Mean (70% Value/Total Sales)'] = \"{:.3f}\".format(sum(x['WKSHT'])/sum(x['Consider']))\n","    d['Median Ratio'] = \"{:.3f}\".format(st.median(x['wksht RATIO'].astype(float)))\n","    d['Mean'] = \"{:.3f}\".format(x['wksht RATIO'].mean())\n","    d['COD'] = \"{:.3f}\".format(st.mean(abs(x['wksht RATIO']-st.median(x['wksht RATIO'])))/st.median(x['wksht RATIO'])*100)\n","    d['PRD'] = \"{:.3f}\".format(((x['WKSHT'] / x['Consider']).mean())/(sum(x['WKSHT'])/sum(x['Consider'])))\n","    return pd.Series(d)\n","\n","def BEST(x):\n","    d = {}\n","    d['Sales in Period'] = \"{:.0f}\".format(x['good assessment'].count())\n","    d['Lowest Sale Price'] = locale.currency(x['Consider'].min(),grouping=True,symbol=True).split('.', 1)[0]\n","    d['Highest Sale Price'] = locale.currency(x['Consider'].max(),grouping=True,symbol=True).split('.', 1)[0]\n","    d['Mean Sale Price'] = locale.currency(x['Consider'].mean(),grouping=True,symbol=True).split('.', 1)[0]\n","    d['Median Sale Price'] = locale.currency(x['Consider'].median(),grouping=True,symbol=True).split('.', 1)[0]\n","    d['Total Assessed 70% Value (Sold Parcels)'] = locale.currency(sum(x['good assessment']),grouping=True,symbol=True).split('.', 1)[0]\n","    d['Total Sale Price'] = locale.currency(sum(x['Consider']),grouping=True,symbol=True).split('.', 1)[0]\n","    d['Weighted Mean (70% Value/Total Sales)'] = \"{:.3f}\".format(sum(x['good assessment'])/sum(x['Consider']))\n","    d['Median Ratio'] = \"{:.3f}\".format(st.median(x['good ratio'].astype(float)))\n","    d['Mean'] = \"{:.3f}\".format(x['good ratio'].mean())\n","    d['COD'] = \"{:.3f}\".format(st.mean(abs(x['good ratio']-st.median(x['good ratio'])))/st.median(x['good ratio'])*100)\n","    d['PRD'] = \"{:.3f}\".format(((x['good assessment'] / x['Consider']).mean())/(sum(x['good assessment'])/sum(x['Consider'])))\n","    return pd.Series(d)\n","\n","cell_format = workbook.add_format()\n","cell_format.set_align('center')\n","cell_format.set_align('vcenter')\n","\n","pivotTables = {}\n","\n","dfCondos=originalDF[(originalDF['BA CODE'].astype(str)=='nan') &\n","      (originalDF['Class'] < 128) & (originalDF['Class'] > 120) &\n","      (originalDF['Consider'] > 0)].dropna(subset=['Parcel ID'])\n","\n","dfRes = originalDF[(originalDF['BA CODE'].astype(str)=='nan') &\n","      (originalDF['Class'] < 121) &\n","      (originalDF['Consider'] > 0)].dropna(subset=['Parcel ID'])\n","\n","dfs = [dfCondos,dfRes]\n","\n","for i in range(2021,2024):\n","    for j in [BEST]:\n","        for k in dfs:\n","            tableNameDistrict = str(i) + ' ' + j.__name__ + \" District\" + (' CONDOS' if k.equals(dfCondos) else ' RES')\n","            tableNamePrice = str(i) + ' ' + j.__name__ + \" Price Range\" + (' CONDOS' if k.equals(dfCondos) else ' RES')\n","            print(tableNameDistrict)\n","            print(tableNamePrice)\n","            pivotTables[tableNameDistrict] = pd.concat([k[\n","                (k['PXfer Date'] >= pd.Timestamp('10-01-'+str(i))) &\n","                (k['PXfer Date'] < pd.Timestamp('9-30-'+str(i+1))) &\n","                (k['Analysis']=='Y') & (k['RatioC']=='Y')\n","            ].groupby('District')[k.columns.values.tolist()].apply(j, include_groups=True).sort_index(),\n","            k[\n","                (k['PXfer Date'] >= pd.Timestamp('10-01-'+str(i))) &\n","                (k['PXfer Date'] < pd.Timestamp('9-30-'+str(i+1))) &\n","                (k['Analysis']=='Y') & (k['RatioC']=='Y')\n","                ].groupby('Twp')[k.columns.values.tolist()].apply(j,include_groups=True).rename(index={1:'Total'})])\n","            if k.equals(dfCondos):\n","                pivotTables[tableNamePrice] = pd.concat([k[\n","                    (k['PXfer Date'] >= pd.Timestamp('10-01-'+str(i))) &\n","                    (k['PXfer Date'] < pd.Timestamp('9-30-'+str(i+1))) &\n","                    (k['Analysis']=='Y') & (k['RatioC']=='Y')\n","                ].groupby('condo Price Range')[k.columns.values.tolist()].apply(j, include_groups=True).reindex(['$0 - $500,000','$500,000 - $1,000,000','$1,000,000 - $2,000,000','$2,000,000 - $3,000,000','$3,000,000 + ']),\n","                k[\n","                    (k['PXfer Date'] >= pd.Timestamp('10-01-'+str(i))) &\n","                    (k['PXfer Date'] < pd.Timestamp('9-30-'+str(i+1))) &\n","                    (k['Analysis']=='Y') & (k['RatioC']=='Y')\n","                    ].groupby('Twp')[k.columns.values.tolist()].apply(j,include_groups=True).rename(index={1:'Total'})])\n","            else:\n","                pivotTables[tableNamePrice] = pd.concat([k[\n","                    (k['PXfer Date'] >= pd.Timestamp('10-01-'+str(i))) &\n","                    (k['PXfer Date'] < pd.Timestamp('9-30-'+str(i+1))) &\n","                    (k['Analysis']=='Y') & (k['RatioC']=='Y')\n","                ].groupby('Price Range')[k.columns.values.tolist()].apply(j, include_groups=True).reindex(['$0 - $1,500,000','$1,500,000 - $3,000,000','$3,000,000 - $6,000,000','$6,000,000 - $10,000,000','$10,000,000 + ']),\n","                k[\n","                    (k['PXfer Date'] >= pd.Timestamp('10-01-'+str(i))) &\n","                    (k['PXfer Date'] < pd.Timestamp('9-30-'+str(i+1))) &\n","                    (k['Analysis']=='Y') & (k['RatioC']=='Y')\n","                    ].groupby('Twp')[k.columns.values.tolist()].apply(j,include_groups=True).rename(index={1:'Total'})])\n","\n","\n","\n","\n","with pd.ExcelWriter(r\"file path\") as writer:\n","    for i in pivotTables:\n","        sheetName = i\n","        pivotTables[i].to_excel(writer,sheet_name=sheetName,index=True)\n","        worksheet = writer.sheets[sheetName]\n","        if 'District' in i:\n","            options = dict(columns=[{'header': c} for c in pivotTables[i].columns.insert(0,'District')],style = 'Table Style Light 15')\n","        else:\n","            options = dict(columns=[{'header': c} for c in pivotTables[i].columns.insert(0,'Price Range')],style = 'Table Style Light 15')\n","        worksheet.add_table(0,0,pivotTables[i].shape[0],pivotTables[i].shape[1],options)\n","        for j in range(1,pivotTables[i].shape[0]+1):\n","            worksheet.set_row(j, 20)\n","        for column in range(pivotTables[i].shape[1]):\n","            for row in range(pivotTables[i].shape[0]):\n","\n","                cell=worksheet.cell(row, column)\n","                cell.alignment = Alignment(horizontal='center', vertical='center')\n","        worksheet.autofit()\n"]}]}