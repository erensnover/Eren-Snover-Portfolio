{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPKItTbee36hzoLB3tGyEVj"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"Etd3RmdiW1-s"},"outputs":[],"source":["'''\n","I utilized DuckDB in this file, a library which allows you to seemlessly integrate Sql code directly into a Python file.\n","This allowed me to join two very large data sets based on a complex set of conditions. This file was able to\n","search through the data sets and combine them within 18 Seconds.\n","'''\n","import pandas as pd\n","import duckdb\n","import time\n","\n","start_time = time.time()\n","\n","df1=pd.read_excel(r\"file path\",4).drop(['Twp','Corp','District','District.1','Neigh','Wksht Val','Wksht Val.1','Cert Val','Cert Val.1','Type','Grade','Cond'],axis=1)\n","df2=pd.read_excel(r\"file path\",6)\n","df1=df1[df1['Parcel ID'].astype(str) != 'nan'].reset_index().reset_index()\n","df2=df2.reset_index().rename(columns={'index':'index_0'}).drop(df2.columns[0:6],axis=1)\n","\n","sql='''\n","SELECT *\n","FROM (SELECT * FROM df1 WHERE df1['level_0'] IN (\n","    SELECT df1['level_0']\n","    FROM df1\n","    FULL OUTER JOIN df2\n","    ON df2['PACEL ID'] = df1['Parcel ID']\n","    WHERE (\n","        (df1['Parcel ID'] = df2['PACEL ID']) AND\n","        (\n","            (df2['YEAR BP']-df1['SXfer Date']=1 AND MONTH(df1['PXfer Date'])>=7) OR\n","            (df1['SXfer Date']>=df2['YEAR BP'])\n","        ) AND (\n","            (UPPER(df2['MEMO']) like '%DEMO%') AND\n","            (df2['MEMO'] like '%100%') AND NOT\n","            (UPPER(df2['MEMO']) like '%GARAGE%') AND NOT\n","            (UPPER(df2['MEMO']) like '%SHED%') AND NOT\n","            (UPPER(df2['MEMO']) like '%BATH%') AND NOT\n","            (UPPER(df2['MEMO']) like '%SPA%') AND NOT\n","            (UPPER(df2['MEMO']) like '%DECK%') AND NOT\n","            (UPPER(df2['MEMO']) like '%ROOF%') AND NOT\n","            (UPPER(df2['MEMO']) like '%PORCH%') AND NOT\n","            (UPPER(df2['MEMO']) like '%OUTBUILDING%') AND NOT\n","            (UPPER(df2['MEMO']) like '%INTERIOR%') AND NOT\n","            (UPPER(df2['MEMO']) like '%KITCHEN%') AND NOT\n","            (UPPER(df2['MEMO']) like '%INT %')\n","            )\n","        )\n","    AND NOT EXISTS (\n","        SELECT *\n","        FROM df2\n","        WHERE (\n","            df1['Parcel ID'] = df2['PACEL ID'] AND\n","            df1['SXfer Date'] > df2['YEAR BP'] AND\n","            (\n","                UPPER(df2['MEMO']) NOT like '%DEMO%' AND\n","                UPPER(df2['MEMO']) NOT like '%PORCH%' AND\n","                UPPER(df2['MEMO']) NOT like '%ROOF%' AND\n","                UPPER(df2['MEMO']) NOT like '%DECK%' AND\n","                UPPER(df2['MEMO']) NOT like '%POOL%' AND\n","                UPPER(df2['MEMO']) NOT like '%SPA%' AND\n","                UPPER(df2['MEMO']) NOT like '%ROOM%' AND\n","                UPPER(df2['MEMO']) NOT like '%REPAIR%' AND\n","                UPPER(df2['MEMO']) NOT like '%RENOVAT%' AND\n","                (\n","                    UPPER(df2['MEMO']) like '%SFR%' OR\n","                    UPPER(df2['MEMO']) like '%FAMILY%' OR\n","                    UPPER(df2['MEMO']) like '%DWELL%' OR\n","                    UPPER(df2['MEMO']) like '%BUILD%' OR\n","                    UPPER(df2['MEMO']) like '%BLD%' OR\n","                    UPPER(df2['MEMO']) like '%HOUSE%' OR\n","                    UPPER(df2['MEMO']) like '%NEW%'\n","                    )\n","                )\n","            )\n","        )\n","    )) AS E\n","LEFT JOIN df2\n","ON E['Parcel ID'] = df2['PACEL ID']\n","ORDER BY E['level_0'],df2['YEAR BP'],df2['BP CODE'],df2['MEMO']\n","'''\n","\n","sqlTable = duckdb.sql(sql).df()\n","\n","print(\"My program took\", time.time() - start_time, \"to run\")"]}]}